---
- hosts: localhost
  connection: local
  vars:
    golang_default_packages:
      - golang.org/x/tools/cmd/goimports
      - golang.org/x/tools/cmd/cover
      - golang.org/x/tools/cmd/godoc
      - golang.org/x/tools/go/packages
      - golang.org/x/lint/golint
      - github.com/golang/dep/cmd/dep
      - github.com/tools/godep
      - github.com/mitchellh/gox
      - github.com/spf13/viper
      - github.com/spf13/cobra


    dockitems_to_remove:
      - Launchpad
      - Mail
      - Safari
      - Contacts
      - Notes
      - Reminders
      - Maps
      - Photos
      - Messages
      - FaceTime
      - iTunes
      - iBooks
      - App Store
      - System Preferences
      - Calendar
      - Siri
    
    dockitems_to_persist:
      - name: Google Chrome
        path: "/Applications/Google Chrome.app"
        pos: 1
      - name: Firefox
        path: "/Applications/Firefox.app"
        pos: 2
      - name: Visual Studio Code
        path: /Applications/Visual Studio Code.app
        pos: 3
      - name: Slack
        path: /Applications/Slack.app
        pos: 4
      - name: iTerm
        path: /Applications/iTerm.app
        pos: 5
      - name: Spotify
        path: /Applications/Spotify.app
        pos: 6
#      - name: Postman
#        path: /Applications/Postman.app
#        pos: 7
  handlers:
    - name: restart AppStore
      command: killall "AppStore"
      ignore_errors: yes

  tasks:

    - name: create .config-directory
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ ansible_user_dir }}/.config"
        - "{{ ansible_user_dir }}/.config/iterm2"

    - name: install homebrew
      shell: '/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
      register: gethomebrew_result
      changed_when: "'up-to-date' not in gethomebrew_result.stdout"

    - name: setup homebrew cask
      homebrew_tap:
        name: homebrew/cask
        state: present

    - name: brew cask apps ftw
      homebrew_cask:
        name: "{{ item }}"
        state: latest
      loop:
        - google-chrome
        - spotify
        - iterm2
        - firefox
        - slack
        - visual-studio-code
        - lastpass
        #- postman
    
    - name: homebrew apps ftw!
      homebrew:
        name: "{{ item }}"
        state: latest
      loop:
        - go
        - git
        - zsh
        - zsh-syntax-highlighting
        - jq
        - terraform
        - dockutil

# Docker for Mac download url is hidden behind login nowadays so well download here
# BIG WARNING: Docker for Mac eats CPU cykles. Beware.
    - name: Download Docker.dmg - install manually
      get_url:
        dest: ~/Downloads/Docker.dmg
        url: https://download.docker.com/mac/stable/Docker.dmg
      tags:
        - docker

    - name: disable natural scroll
      osx_defaults:
        key: com.apple.swipescrolldirection
        type: bool
        value: "{{ natural_scroll | default(false) }}"

    - name: finder set enable
      osx_defaults:
        domain: com.apple.finder
        key: "{{ item }}"
        type: bool
        value: true
      with_items:
        - ShowStatusBar
        - ShowPathbar
        - ShowTabView
        - AppleShowAllFiles
        - _FXShowPosixPathInTitle
        - QLEnableTextSelection

    - name: disable siri
      osx_defaults:
        domain: "{{ item.domain }}"
        key: "{{ item.key }}"
        type: bool
        value: "{{ item.value }}"
      loop:
        - { domain: "com.apple.Siri", key: "Disabled", value: true }
        - { domain: "com.apple.Siri", key: "UserHasDeclinedEnable", value: true }
        - { domain: "com.apple.Siri", key: "StatusMenuVisible", value: false }
        - { domain: "com.apple.assistant.support", key: "Assistant Enabled", value: false }

    - name: Avoid creating .DS_Store files on network volumes
      osx_defaults:
        domain: com.apple.desktopservices
        key: DSDontWriteNetworkStores
        type: bool
        value: true


    - name: autohide dock
      osx_defaults:
        domain: com.apple.dock
        key: autohide
        type: bool
        value: true

    - name: autohide dock delay
      osx_defaults:
        domain: com.apple.dock
        key: autohide-delay
        type: float
        value: 0

    - name: Avoid creating .DS_Store files on network volumes
      osx_defaults:
        domain: com.apple.desktopservices
        key: DSDontWriteNetworkStores
        type: bool
        value: true


    - name: "AppStore - Automatically check for updates"
      osx_defaults: 
        domain: com.apple.SoftwareUpdate
        key: "{{ item }}"
        type: bool
        value: true
      notify: restart AppStore
      loop:
        - 'AutomaticCheckEnabled'
        - 'AutomaticDownload'
        - 'ConfigDataInstall'
        - 'CriticalUpdateInstall'
      tags:
        - appstore

    - name: "AppStore - automatically install "
      osx_defaults: 
        domain: com.apple.commerce
        key: "{{ item }}"
        type: bool
        value: true
      notify: restart AppStore
      loop:
        - 'AutoUpdate'
        - 'AutoUpdateRestartRequired'
      tags:
        - appstore

    - name: "AppStore - update check frequency"
      osx_defaults: 
        domain: com.apple.SoftwareUpdate
        key: "{{ item }}"
        type: int
        value: 2
      notify: restart AppStore
      loop:
        - 'ScheduleFrequency'
      tags:
        - appstore



#    - name: set defaults for Control Strip (= the damn "Touch Bar") (will always overwrite current config as of now..)
#      shell: cat files/controlstrip.plist | defaults import - ~/Library/Preferences/com.apple.controlstrip.plist && killall ControlStrip

    - name: Stop iTunes from responding to the keyboard media keys
      shell: launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist 2> /dev/null


    - name: 'get "oh my zsh"'
      shell: sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
      register: getohmyzsh_result
      changed_when: "'You already have Oh My Zsh installed' not in getohmyzsh_result.stdout"

    - name: template out .zshrc
      template:
        src: templates/zshrc.j2
        dest: ~/.zshrc

    - name: get the iterm2 fonts and color themes
      get_url: 
        url: "{{ item.url }}"
        dest: "{{ item.dest }}"
      loop:
        - {url: "https://raw.githubusercontent.com/powerline/fonts/master/SourceCodePro/Source%20Code%20Pro%20for%20Powerline.otf", dest: "~/Library/Fonts/Source Code Pro for Powerline.ttf"}
        - {url: "https://raw.githubusercontent.com/powerline/fonts/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf", dest: "~/Library/Fonts/Meslo LG M Regular for Powerline.ttf"}
        - {url: "https://raw.githubusercontent.com/altercation/solarized/master/iterm2-colors-solarized/Solarized%20Dark.itermcolors", dest: "{{ ansible_user_dir }}/.config/iterm2/Solarized Dark.itermcolors"}
        - {url: "https://raw.githubusercontent.com/altercation/solarized/master/iterm2-colors-solarized/Solarized%20Light.itermcolors", dest: "{{ ansible_user_dir }}/.config/iterm2/Solarized Light.itermcolors"}

    - name: set iTerm2 to load config from files
      osx_defaults:
        domain: com.googlecode.iterm2
        key: LoadPrefsFromCustomFolder
        type: bool
        value: true

    - name: set the folder for iTerm2 to load config from
      osx_defaults:
        domain: com.googlecode.iterm2
        key: PrefsCustomFolder
        type: string
        value: "{{ ansible_user_dir }}/.config/iterm2"        

    - name: template out iTerm2 config
      template:
        src: templates/com.googlecode.iterm2.plist.j2
        dest: "{{ ansible_user_dir }}/.config/iterm2/com.googlecode.iterm2.plist"

### Remove crap from Dock with "dockutil"
# https://blog.vandenbrand.org/2016/01/04/how-to-automate-your-mac-os-x-setup-with-ansible/


    - name: Remove all crap from Dock
      shell: dockutil --remove '{{ item }}'
      ignore_errors: true
      loop: "{{dockitems_to_remove}}"
      tags:
        - dock
    
    - name: Check if items in dock exist
      shell: dockutil --find '{{ item.name }}' || dockutil --add '{{ item.path }}'
      loop: "{{dockitems_to_persist}}"
      tags:
        - dock

    - name: Fix order
      shell: dockutil --move '{{ item.name }}' --position {{ item.pos }}
      loop: "{{dockitems_to_persist}}"
      tags:
        - dock

### Setup Go defaults
    - name: Go path dirs
      file: 
        path: "{{ ansible_user_dir }}/go/{{ item }}"
        state: directory
      loop:
        - src
        - pkg
        - bin
      tags:
        - golang

    - name: Install golang packages
      command: "go get -u -v {{ item }}"
      loop: "{{ golang_default_packages }}"
      ignore_errors: yes
      tags:
        - golang

    - name: set zsh as default shell
      shell: |
        sudo chsh -s /usr/local/bin/zsh {{ ansible_user_id }}
      tags: [default_shell]