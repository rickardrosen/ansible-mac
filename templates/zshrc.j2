# Path to your oh-my-zsh installation.
export ZSH="{{ ansible_user_dir }}/.oh-my-zsh"

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="agnoster"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
)

source $ZSH/oh-my-zsh.sh
HIST_STAMPS="yyyy-mm-dd"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source {{ ansible_user_dir }}/.github_token
PATH=$HOME/go/bin:$PATH


# bindkey below will fix a "bug" (skit bakom spakarna...) when using non-us keyboard (possibly swedish) and pressing alt-space instead of just space by mistake on mac keyboard. 
bindkey -s "\xC2\xA0" " "

#### SAVE YOUR KEYBOARD KUBERNETES ALIASES #######

k8slogs () {
## example "k8slogs aws" will grep logs for pods starting with 'aws'
        if [ -z "$1" ]
            then
                echo "\no argument, quitting!"
                return 1
        fi
kubectl get pods --all-namespaces -o wide | awk -v reg=$1 '{for (i=1;i<=NF;i++){if($i ~ "^" reg ".*"){system("kubectl logs "$i " --all-containers -n " $1)}}}'

}


getk8spod () {
        kubectl get pods --all-namespaces -o wide | awk -v reg=$1 '{for (i=1;i<=NF;i++){if($i ~ "^" reg ".*"){system("kubectl get pods "$i " -n " $1)}}}'
}

describek8spod () {
        kubectl get pods --all-namespaces -o wide | awk -v reg=$1 '{for (i=1;i<=NF;i++){if($i ~ "^" reg ".*"){system("kubectl describe pods "$i " -n " $1)}}}'
}

getk8sdeployment () {
        kubectl get deployment --all-namespaces -o wide | awk -v reg=$1 '{for (i=1;i<=NF;i++){if($i ~ "^" reg ".*"){system("kubectl describe deployment "$i " -n " $1)}}}'
}

getk8ssvc () {
        kubectl get svc --all-namespaces -o wide | awk -v reg=$1 '{for (i=1;i<=NF;i++){if($i ~ "^" reg ".*"){system("kubectl describe svc "$i " -n " $1)}}}'
}


k8x () {
        DATA=`kubectl get pods --all-namespaces -o wide`
        C=`echo $DATA|grep $1 |cut -d' ' -f4|head -1`
        N=`echo $DATA|grep $1 |cut -d' ' -f1|head -1`
        kubectl exec -n $N -it $C -- $2 $3 $4
}



execk8spods () {
        kubectl get pods --all-namespaces -o wide | awk -v reg=$1 '{for (i=1;i<=NF;i++){if($i ~ "^" reg ".*"){system("kubectl exec -it "$i " -n " $1 -- $2)}}}'
}

describek8spvc () {
        kubectl get pvc --all-namespaces -o wide | awk -v reg=$1 '{for (i=1;i<=NF;i++){if($i ~ "^" reg ".*"){system("kubectl describe pvc "$i " -n " $1)}}}'
}

describek8ssvcmonitor () {
        kubectl get servicemonitor --all-namespaces -o wide | awk -v reg=$1 '{for (i=1;i<=NF;i++){if($i ~ "^" reg ".*"){system("kubectl describe servicemonitor "$i " -n " $1)}}}'
}

describek8sstateset () {
        kubectl get statefulset --all-namespaces -o wide | awk -v reg=$1 '{for (i=1;i<=NF;i++){if($i ~ "^" reg ".*"){system("kubectl describe statefulset "$i " -n " $1)}}}'
}

alias k8sexec='execk8spods'
alias k8screate='kubectl create'
alias k8snodes='kubectl get nodes -o wide'
alias k8spods='kubectl get pods --all-namespaces -o wide'
alias k8spod='getk8spod'
alias k8ssvc='kubectl get svc --all-namespaces -o wide'
alias k8sdset='kubectl get daemonset --all-namespaces -o wide'
alias k8sconfig='kubectl get configmap --all-namespaces -o wide'
alias k8sdescconfig='kubectl describe configmap --all-namespaces -o wide'
alias k8slogs='getk8slogs'
alias k8sdescpod='describek8spod'
alias k8sdescsvc='kubectl describe svc'
alias k8sdescdset='kubectl describe daemonset --all-namespaces'
alias k8sdescsvc='getk8ssvc'
alias k8scron='kubectl get cronjob --all-namespaces -o wide'
alias k8sdesccron='kubectl describe cronjob --all-namespaces'
alias k8sjob='kubectl get job --all-namespaces -o wide'
alias k8sdeployment='kubectl get deployment --all-namespaces -o wide'
alias k8sdescdeployment='getk8sdeployment'
alias k8snamespace='kubectl get namespaces'
alias k8spvc='kubectl get pvc --all-namespaces'
alias k8sdescpvc='describek8spvc'
alias k8sstorage='kubectl get storageclass'
alias k8ssvcmonitor='kubectl get servicemonitor --all-namespaces'
alias k8sdescsvcmonitor='describek8ssvcmonitor'
alias k8sstateset='kubectl get statefulset --all-namespaces'
alias k8sdescstateset='describek8sstateset'
bastion () {
  REGION="${2:-eu-north-1}"
  MASTER1=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=workers-${1}" --query "Reservations[*].Instances[*].PrivateIpAddress" --output=text --region=${REGION} |tr "\t" "\n" |sort|uniq|head -1)
  BASTION=$(aws elb describe-load-balancers --region ${REGION} --no-paginate --query "LoadBalancerDescriptions[?LoadBalancerName=='bastion-elb-${1}'].DNSName" --output=text)
  echo "ssh -oStrictHostKeyChecking=no -J ubuntu@${BASTION}  ec2-user@${MASTER1}"
  ssh -oStrictHostKeyChecking=no -J ubuntu@${BASTION}  ec2-user@${MASTER1}
}
alias k8ssh='bastion'

#################################################